package vista;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;


import entidad.Cliente;
import mantenimiento.GestionClienteDAO;
import utils.Validaciones;

public class FrmRegistroClientes extends JFrame implements ActionListener {

	private JPanel contentPane;
	private JLabel lblNewLabel;
	private JButton btnNuevoCliente;
	private JButton btnActualizarCliente;
	private JButton btnEliminarCliente;
	private JButton btnRegistroCliente;
	private JSeparator separator;
	private JLabel lblCodigo;
	private JLabel lblTelefono;
	private JLabel lblRuc;
	private JLabel lblCorreo;
	private JLabel lblRazSocial;
	private JLabel lblDireccion;
	private JTextField txtCodigo;
	private JTextField txtRuc;
	private JTextField txtRazSocial;
	private JTextField txtTelefono;
	private JTextField txtCorreo;
	private JTextField txtDireccion;
	private JTable tblClientes;
	private JScrollPane scrollPane;
	private JButton btnBuscar;

	// Instanciar objeto para definir la tabla
	DefaultTableModel model = new DefaultTableModel();
	
	// 
	GestionClienteDAO gCli = new GestionClienteDAO();
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Throwable e) {
			e.printStackTrace();
		}
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FrmRegistroClientes frame = new FrmRegistroClientes();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public FrmRegistroClientes() {
//		setClosable(true);
//		setMaximizable(true);
//		setIconifiable(true);
		initGUI();
	}
	private void initGUI() {
		setTitle("DON TUERCAS S.A.C. - Mantenimiento Clientes");
		setBounds(100, 100, 841, 652);
		contentPane = new JPanel();
		contentPane.setBackground(SystemColor.activeCaption);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		lblNewLabel = new JLabel("Mantenimiento de Clientes");
		lblNewLabel.setForeground(Color.WHITE);
		lblNewLabel.setBackground(Color.BLACK);
		lblNewLabel.setOpaque(true);
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel.setFont(new Font("Trebuchet MS", Font.BOLD, 18));
		lblNewLabel.setBounds(0, 11, 829, 47);
		contentPane.add(lblNewLabel);
		
		btnNuevoCliente = new JButton("");
		btnNuevoCliente.addActionListener(this);
		btnNuevoCliente.setContentAreaFilled(false);
		btnNuevoCliente.setBorderPainted(false);
		btnNuevoCliente.setIcon(new ImageIcon(FrmRegistroClientes.class.getResource("/img/299068_add_sign_icon.png")));
		btnNuevoCliente.setFont(new Font("Trebuchet MS", Font.BOLD, 12));
		btnNuevoCliente.setBounds(661, 242, 32, 32);
		contentPane.add(btnNuevoCliente);
		
		btnActualizarCliente = new JButton("");
		btnActualizarCliente.addActionListener(this);
		btnActualizarCliente.setContentAreaFilled(false);
		btnActualizarCliente.setBorderPainted(false);
		btnActualizarCliente.setIcon(new ImageIcon(FrmRegistroClientes.class.getResource("/img/46828_reload_refrsh_calculate_icon.png")));
		btnActualizarCliente.setFont(new Font("Trebuchet MS", Font.BOLD, 12));
		btnActualizarCliente.setBounds(745, 242, 32, 32);
		contentPane.add(btnActualizarCliente);
		
		btnEliminarCliente = new JButton("");
		btnEliminarCliente.addActionListener(this);
		btnEliminarCliente.setContentAreaFilled(false);
		btnEliminarCliente.setBorderPainted(false);
		btnEliminarCliente.setIcon(new ImageIcon(FrmRegistroClientes.class.getResource("/img/7549103_user_interface_remove_delete_trash_icon.png")));
		btnEliminarCliente.setFont(new Font("Trebuchet MS", Font.BOLD, 12));
		btnEliminarCliente.setBounds(787, 242, 32, 32);
		contentPane.add(btnEliminarCliente);
		
		btnRegistroCliente = new JButton("");
		btnRegistroCliente.addActionListener(this);
		btnRegistroCliente.setContentAreaFilled(false);
		btnRegistroCliente.setBorderPainted(false);
		btnRegistroCliente.setIcon(new ImageIcon(FrmRegistroClientes.class.getResource("/img/285657_floppy_guardar_save_icon.png")));
		btnRegistroCliente.setFont(new Font("Trebuchet MS", Font.BOLD, 12));
		btnRegistroCliente.setBounds(703, 242, 32, 32);
		contentPane.add(btnRegistroCliente);
		
		separator = new JSeparator();
		separator.setBounds(791, 206, 1, 2);
		contentPane.add(separator);
		
		lblCodigo = new JLabel("Codigo:");
		lblCodigo.setFont(new Font("Comic Sans MS", Font.PLAIN, 16));
		lblCodigo.setBounds(24, 80, 80, 23);
		contentPane.add(lblCodigo);
		
		lblTelefono = new JLabel("Telefono:");
		lblTelefono.setFont(new Font("Comic Sans MS", Font.PLAIN, 16));
		lblTelefono.setBounds(554, 80, 80, 14);
		contentPane.add(lblTelefono);
		
		lblRuc = new JLabel("Ruc:");
		lblRuc.setFont(new Font("Comic Sans MS", Font.PLAIN, 16));
		lblRuc.setBounds(554, 130, 45, 14);
		contentPane.add(lblRuc);
		
		lblCorreo = new JLabel("Correo:");
		lblCorreo.setFont(new Font("Comic Sans MS", Font.PLAIN, 16));
		lblCorreo.setBounds(24, 228, 80, 14);
		contentPane.add(lblCorreo);
		
		lblRazSocial = new JLabel("Razon Social:");
		lblRazSocial.setFont(new Font("Comic Sans MS", Font.PLAIN, 16));
		lblRazSocial.setBounds(21, 132, 112, 14);
		contentPane.add(lblRazSocial);
		
		lblDireccion = new JLabel("Direccion:");
		lblDireccion.setFont(new Font("Comic Sans MS", Font.PLAIN, 16));
		lblDireccion.setBounds(21, 180, 80, 14);
		contentPane.add(lblDireccion);
		
		txtCodigo = new JTextField();
		txtCodigo.setBounds(21, 102, 102, 20);
		contentPane.add(txtCodigo);
		txtCodigo.setColumns(10);
		
		txtRuc = new JTextField();
		txtRuc.setBounds(554, 146, 139, 20);
		contentPane.add(txtRuc);
		txtRuc.setColumns(10);
		
		txtRazSocial = new JTextField();
		txtRazSocial.setBounds(21, 148, 359, 20);
		contentPane.add(txtRazSocial);
		txtRazSocial.setColumns(10);
		
		txtTelefono = new JTextField();
		txtTelefono.setBounds(554, 100, 139, 20);
		contentPane.add(txtTelefono);
		txtTelefono.setColumns(10);
		
		txtCorreo = new JTextField();
		txtCorreo.setBounds(21, 242, 359, 20);
		contentPane.add(txtCorreo);
		txtCorreo.setColumns(10);
		
		txtDireccion = new JTextField();
		txtDireccion.setBounds(21, 198, 359, 20);
		contentPane.add(txtDireccion);
		txtDireccion.setColumns(10);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 284, 809, 329);
		contentPane.add(scrollPane);
		
		tblClientes = new JTable();
		tblClientes.setFillsViewportHeight(true);
		scrollPane.setViewportView(tblClientes);
		
		btnBuscar = new JButton("");
		btnBuscar.addActionListener(this);
		btnBuscar.setIcon(new ImageIcon(FrmRegistroClientes.class.getResource("/img/34229_find_magnifier_search_zoom_icon.png")));
		btnBuscar.setFont(new Font("Trebuchet MS", Font.BOLD, 12));
		btnBuscar.setContentAreaFilled(false);
		btnBuscar.setBorderPainted(false);
		btnBuscar.setBounds(133, 90, 32, 32);
		contentPane.add(btnBuscar);
		
		// Determinar Columnas
		model.addColumn("Código");
		model.addColumn("Raz. Social");
		model.addColumn("Ruc");
		model.addColumn("Teléfono");
		model.addColumn("Dirección");
		model.addColumn("Correo");
		
		// Asignar
		tblClientes.setModel(model);
		
		txtCodigo.setText(""+getCodigo());
				
	}
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnNuevoCliente) {
			actionPerformedBtnNuevoCliente(e);
		}
		if (e.getSource() == btnBuscar) {
			actionPerformedBtnBuscar(e);
		}
		if (e.getSource() == btnEliminarCliente) {
			actionPerformedBtnEliminarCliente(e);
		}
		if (e.getSource() == btnActualizarCliente) {
			actionPerformedBtnActualizarCliente(e);
		}
		if (e.getSource() == btnRegistroCliente) {
			actionPerformedBtnRegistroCliente(e);
		}
	}
	protected void actionPerformedBtnRegistroCliente(ActionEvent e) {
		registrarClientes();
	}

	private void registrarClientes() {
		// Variables
		String razSocial, direc, correo;
		int cod, ruc, telf;
		
		// Entradas
		cod = getCodigo();
		razSocial = getRazSocial();
		ruc = getRuc();
		telf = getTelefono();
		direc = getDireccion();
		correo = getCorreo();
		
		// Controlar el ingreso de datos correctos en la tabla
		if(cod == 0 || razSocial == null || ruc == 0 || telf == 0 || direc == null || correo == null) {
			return;
		}else {
			// Crear un objeto de la clase clientes
			Cliente c = new Cliente();
			// setear
			c.setCodCliente(cod);
			c.setRazSocial(razSocial);
			c.setRUC(ruc);
			c.setTelefono(telf);
			c.setDireccion(direc);
			c.setCorreo(correo);
			
			// Invocar el resultado del metodo
			int res = gCli.registrar(c);
			
			// Validar el resultado del metodo
			if(res == 0)
				mensajeError("Error en el registro");
			else {
				mensajeExito("Registro Exitoso");
			}
		}
	}

	private int getCodigo() {
		return gCli.generarCodigoCliente();
	}

	private String getRazSocial() {
		String raz = null;
		// validar caja de texto vacia
		if (txtRazSocial.getText().trim().length() == 0) {
			mensajeError("Ingresar Raz. Social del cliente");
			txtRazSocial.requestFocus();			
		} else if (txtRazSocial.getText().trim().matches(Validaciones.RazonSocial)) {
			raz = txtRazSocial.getText().trim();
		} else {
			mensajeError("Formato de Raz.Social no valido !!");
			txtRazSocial.setText("");
			txtRazSocial.requestFocus();
		} 

		return raz;
	}

	// 1: Mensaje Error
	 	private void mensajeError(String msj) {
	 		JOptionPane.showMessageDialog(this, msj, "Error !!", 0);		
	 	}
	 	// 2: Mensaje Exito
	 	private void mensajeExito(String msj) {
			JOptionPane.showMessageDialog(this, msj,"Sistema", 1);
			
		}

	private int getRuc() {
		int ruc = 0;
		if(txtRuc.getText().trim().length() == 0) {
			mensajeError("Ingresar el RUC del cliente");
			txtRuc.requestFocus();
		}else if(txtRuc.getText().trim().matches(Validaciones.RUC)){
			ruc = Integer.parseInt(txtRuc.getText());
		}else {
			mensajeError("Formato del RUC incorrecto");
			txtRuc.setText("");
			txtRuc.requestFocus();
		}
		
		return ruc;
	}

	private int getTelefono() {
		int telf = 0;
		if(txtTelefono.getText().trim().length() == 0) {
			mensajeError("Ingresar el Telf. del cliente");
			txtTelefono.requestFocus();
		}else if(txtTelefono.getText().trim().matches(Validaciones.Telefono)){
			telf = Integer.parseInt(txtTelefono.getText());
		}else {
			mensajeError("Formato del Telf. incorrecto");
			txtTelefono.setText("");
			txtTelefono.requestFocus();
		}
		
		return telf;
	}

	private String getDireccion() {
		String direc = null;
		// validar caja de texto vacia
		if (txtDireccion.getText().trim().length() == 0) {
			mensajeError("Ingresar direccion del cliente");
			txtDireccion.requestFocus();			
		} else if (txtDireccion.getText().trim().matches(Validaciones.Direccion)) {
			direc = txtDireccion.getText().trim();
		} else {
			mensajeError("Formato de la direccion no valido !!");
			txtDireccion.setText("");
			txtDireccion.requestFocus();
		} 

		return direc;
	}

	private String getCorreo() {
		String correo = null;
		// validar caja de texto vacia
		if (txtCorreo.getText().trim().length() == 0) {
			mensajeError("Ingresar correo del cliente");
			txtCorreo.requestFocus();			
		} else if (txtCorreo.getText().trim().matches(Validaciones.Correo)) {
			correo = txtCorreo.getText().trim();
		} else {
			mensajeError("Formato del correo no valido !!");
			txtCorreo.setText("");
			txtCorreo.requestFocus();
		} 

		return correo;
	}
	protected void actionPerformedBtnActualizarCliente(ActionEvent e) {
		actualizarCliente();
	}

	private void actualizarCliente() {
		// Variables
		String razSocial, direc, correo;
		int cod, ruc, telf;
				
		// Entradas
		cod = getCodigoCli();
		razSocial = getRazSocial();
		ruc = getRuc();
		telf = getTelefono();
		direc = getDireccion();
		correo = getCorreo();
				
		// Validaciones
		if(cod == 0 || razSocial == null || ruc == 0 || telf == 0 || direc == null || correo == null) {
			return;
		}else {
		// crear un objeto del tipo productos
		Cliente c = new Cliente();
				
		// Setear 
		c.setCodCliente(cod);
		c.setRazSocial(razSocial);
		c.setRUC(ruc);
		c.setTelefono(telf);
		c.setDireccion(direc);
		c.setCorreo(correo);
				
		// Invocar el resultado del metodo
		int res = gCli.actualizar(c);
				
		// Validar el resultado del proceso actualizar
		if(res == 0)
			mensajeError("Error en la actualizacion");
		else {
			mensajeExito("Cliente Actualizado");
			//cargarData();
		}		
	  }	
	}

	private int getCodigoCli() {
		int codCli = 0;
		if(txtCodigo.getText().trim().length() == 0) {
			mensajeError("Ingresar el código del cliente");
			txtCodigo.requestFocus();
		}else if(txtCodigo.getText().trim().matches(Validaciones.Codigo)){
			codCli = Integer.parseInt(txtCodigo.getText());
		}else {
			mensajeError("Formato del codigo Incorrecto");
			txtCodigo.setText("");
			txtCodigo.requestFocus();
		}
		
		return codCli;
	}
	protected void actionPerformedBtnEliminarCliente(ActionEvent e) {
		eliminarCliente();
	}

	private void eliminarCliente() {
		int cod;
		
		// obtener el codigo ingresado en la GUI
		cod = getCodigoCli();
		
		// validar 
		if(cod == -1) {
			return;
		}else {
			// Mensaje de confirmacion
		int boton = JOptionPane.showConfirmDialog(this, "Seguro de eliminar","Sistema",JOptionPane.YES_NO_OPTION);
			if(boton == 0) { // SI ---> 0 / NO ---> 1 / CANCELAR ---> 2 
				int ok = gCli.eliminar(cod);
				// validar el resultado del proceso eliminar
				if(ok == 0) {
					mensajeError("Código no existe");
				}else {
					mensajeExito("Cliente Eliminado");
					//cargarData();
				}
			}
		}
		
	}
	protected void actionPerformedBtnBuscar(ActionEvent e) {
		buscarClientePorCodigo();
	}

	private void buscarClientePorCodigo() {
		int cod;
		Cliente clie;
		// Obtenemos los valores de la GUI
		cod = getCodigoCli();
		
		clie = gCli.buscarCliente(cod);
		
		// validar el resultado
		if(clie == null) {
			mensajeError("Codigo no existe");
		}else {txtRazSocial.setText(clie.getRazSocial());
			   txtRuc.setText(""+clie.getRUC());
			   txtTelefono.setText(""+clie.getTelefono());
			   txtDireccion.setText(clie.getDireccion());
			   txtCorreo.setText(clie.getCorreo());				
		}
	}
	
	
	
	
	protected void actionPerformedBtnNuevoCliente(ActionEvent e) {
		
		// Limpiar
		txtCodigo.setText("");
		txtRazSocial.setText("");
		txtRuc.setText("");
		txtTelefono.setText("");
		txtDireccion.setText("");
		txtCorreo.setText("");
		
		// llamar a codigo autogenerado
		txtCodigo.setText(""+getCodigo());
		txtRazSocial.requestFocus();
	}
	
	private void cargarData() {
		// Limpiar la tabla
		model.setRowCount(0);
		
		// 
		ArrayList<Cliente> lista = gCli.listarClientes();
		
		// Validar
		if(lista.size() == 0) {
			mensajeError("Lista Vacia");
		}else {// Bucle
			for (Cliente cli : lista) {
				Object fila [] = {cli.getCodCliente(),
								  cli.getRazSocial(),
								  cli.getRUC(),
								  cli.getTelefono(),
								  cli.getDireccion(),
								  cli.getCorreo()
									};
				model.addRow(fila);
			}
		}
	}
	
}
